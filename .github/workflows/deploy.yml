name: CI/CD Pipeline for Azure VM

on:
  push:
    branches:
      - main

jobs:
  deploy-to-azure-vm:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.AZURE_VM_IP }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        script: |
          # 1. git 저장소 확인 및 설정
          if [ ! -d "/home/azureuser/webserver" ]; then
            echo "디렉토리가 없습니다. 새로 생성합니다..."
            mkdir -p /home/azureuser/webserver
          fi
          
          cd /home/azureuser/webserver
          
          if [ ! -d ".git" ]; then
            echo "Git 저장소가 아닙니다. 저장소를 초기화합니다..."
            # 기존 내용 백업 (혹시 모를 경우)
            if [ "$(ls -A)" ]; then
              echo "기존 파일이 있습니다. 백업 후 진행합니다..."
              mkdir -p /home/azureuser/webserver_backup
              cp -r * /home/azureuser/webserver_backup/ 2>/dev/null || true
              rm -rf * 2>/dev/null || true
              rm -rf .* 2>/dev/null || true
            fi
            
            git clone https://github.com/NamidaEro/webserver.git /tmp/webserver_temp
            cp -r /tmp/webserver_temp/. /home/azureuser/webserver/
            rm -rf /tmp/webserver_temp
          else
            echo "Git 저장소가 존재합니다. pull 명령을 실행합니다..."
            git reset --hard HEAD
            git clean -fd
            git pull origin main
          fi
          
          # 2. docker-compose 설치 확인 및 설치
          if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
            echo "docker-compose가 설치되어 있지 않습니다. 설치를 진행합니다..."
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin
            
            # 구 버전 docker-compose가 필요한 경우 추가 설치
            if ! command -v docker-compose &> /dev/null; then
              echo "docker compose plugin 대신 독립 실행형 docker-compose를 설치합니다..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          else
            echo "docker-compose가 이미 설치되어 있습니다."
          fi
          
          # 3. .env 파일 확인 및 생성
          if [ ! -f "/home/azureuser/webserver/data-collector/.env" ]; then
            echo "데이터 수집기 .env 파일이 없습니다. 기본 템플릿을 생성합니다..."
            mkdir -p /home/azureuser/webserver/data-collector
            
            # 개별 echo 명령어로 환경 변수 파일 생성
            echo "BLIZZARD_CLIENT_ID=${BLIZZARD_CLIENT_ID}" > /home/azureuser/webserver/data-collector/.env
            echo "BLIZZARD_CLIENT_SECRET=${BLIZZARD_CLIENT_SECRET}" >> /home/azureuser/webserver/data-collector/.env
            echo "BLIZZARD_REGION=kr" >> /home/azureuser/webserver/data-collector/.env
            echo "BLIZZARD_NAMESPACE=dynamic-kr" >> /home/azureuser/webserver/data-collector/.env
            echo "BLIZZARD_LOCALE=ko_KR" >> /home/azureuser/webserver/data-collector/.env
            echo "MONGODB_URI=${MONGODB_URI}" >> /home/azureuser/webserver/data-collector/.env
          fi
          
          # Next.js 환경 변수 설정
          if [ ! -f "/home/azureuser/webserver/nextjs-app/.env" ]; then
            echo "Next.js 앱 .env 파일이 없습니다. 기본 템플릿을 생성합니다..."
            mkdir -p /home/azureuser/webserver/nextjs-app
            
            # MongoDB 관련 환경 변수 설정을 추가합니다
            echo "MONGODB_URI=${MONGODB_URI}" > /home/azureuser/webserver/nextjs-app/.env
          fi
          
          # 4. 서비스 빌드 및 실행
          cd /home/azureuser/webserver
          
          # 로그 디렉토리 생성 및 권한 설정
          mkdir -p /home/azureuser/webserver/logs
          sudo chown -R azureuser:azureuser /home/azureuser/webserver/logs
          sudo chmod -R 777 /home/azureuser/webserver/logs

          # Docker Compose 명령어 실행 함수 정의
          run_docker_compose() {
            if command -v docker-compose &> /dev/null; then
              echo "기존 Docker Compose 명령 사용: docker-compose $@"
              sudo docker-compose "$@"
            else
              echo "새 Docker Compose 명령 사용: docker compose $@"
              sudo docker compose "$@"
            fi
          }

          # 1. 기존 data-collector 컨테이너 중지 및 이미지 삭제 (오류 무시)
          echo "기존 data-collector 서비스 중지 시도..."
          run_docker_compose down data-collector || true 
          echo "기존 data-collector 이미지 삭제 시도..."
          # 현재 data-collector 이미지 ID 가져오기 (오류 발생해도 계속 진행)
          IMAGE_ID=$(sudo docker images --filter=reference='webserver_data-collector' -q || sudo docker images --filter=reference='webserver-data-collector' -q || sudo docker images --filter=reference='*/webserver-data-collector' -q || echo "")
          if [ -n "$IMAGE_ID" ]; then
            sudo docker rmi -f $IMAGE_ID || true
            echo "data-collector 이미지 ($IMAGE_ID) 삭제 시도 완료."
          else
            echo "data-collector 이미지를 찾지 못했거나, 가져오는데 실패했습니다."
          fi

          # 2. 모든 서비스 중지 (data-collector 외 다른 서비스 포함)
          echo "모든 Docker Compose 서비스 중지..."
          run_docker_compose down || true # 실패하더라도 계속 진행

          # 3. (선택 사항) Docker 시스템 정리 - 주의: 프로덕션 환경에서는 신중히 결정
          # echo "Docker 시스템 정리 시도 (사용하지 않는 모든 리소스)..."
          # sudo docker system prune -a -f --volumes || true # --volumes 사용 시 데이터 유실 가능성 있음

          # 4. 모든 서비스 새로 빌드 및 시작
          echo "모든 서비스 새로 빌드 (--no-cache) 및 시작..."
          run_docker_compose build --no-cache
          run_docker_compose up -d
          
          echo "배포가 완료되었습니다!"
